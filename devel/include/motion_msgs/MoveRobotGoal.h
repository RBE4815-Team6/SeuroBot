// Generated by gencpp from file motion_msgs/MoveRobotGoal.msg
// DO NOT EDIT!


#ifndef MOTION_MSGS_MESSAGE_MOVEROBOTGOAL_H
#define MOTION_MSGS_MESSAGE_MOVEROBOTGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace motion_msgs
{
template <class ContainerAllocator>
struct MoveRobotGoal_
{
  typedef MoveRobotGoal_<ContainerAllocator> Type;

  MoveRobotGoal_()
    : x(0)
    , y(0)
    , z(0)
    , roll(0)
    , pitch(0)
    , yaw(0)
    , frame()  {
    }
  MoveRobotGoal_(const ContainerAllocator& _alloc)
    : x(0)
    , y(0)
    , z(0)
    , roll(0)
    , pitch(0)
    , yaw(0)
    , frame(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _x_type;
  _x_type x;

   typedef int32_t _y_type;
  _y_type y;

   typedef int32_t _z_type;
  _z_type z;

   typedef int32_t _roll_type;
  _roll_type roll;

   typedef int32_t _pitch_type;
  _pitch_type pitch;

   typedef int32_t _yaw_type;
  _yaw_type yaw;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _frame_type;
  _frame_type frame;





  typedef boost::shared_ptr< ::motion_msgs::MoveRobotGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motion_msgs::MoveRobotGoal_<ContainerAllocator> const> ConstPtr;

}; // struct MoveRobotGoal_

typedef ::motion_msgs::MoveRobotGoal_<std::allocator<void> > MoveRobotGoal;

typedef boost::shared_ptr< ::motion_msgs::MoveRobotGoal > MoveRobotGoalPtr;
typedef boost::shared_ptr< ::motion_msgs::MoveRobotGoal const> MoveRobotGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motion_msgs::MoveRobotGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motion_msgs::MoveRobotGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace motion_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'motion_msgs': ['/home/avrs/seurobot_ws/devel/share/motion_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::motion_msgs::MoveRobotGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motion_msgs::MoveRobotGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motion_msgs::MoveRobotGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motion_msgs::MoveRobotGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motion_msgs::MoveRobotGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motion_msgs::MoveRobotGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motion_msgs::MoveRobotGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a101dd5dba2d1c368ee90b99dc6909b8";
  }

  static const char* value(const ::motion_msgs::MoveRobotGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa101dd5dba2d1c36ULL;
  static const uint64_t static_value2 = 0x8ee90b99dc6909b8ULL;
};

template<class ContainerAllocator>
struct DataType< ::motion_msgs::MoveRobotGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motion_msgs/MoveRobotGoal";
  }

  static const char* value(const ::motion_msgs::MoveRobotGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motion_msgs::MoveRobotGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#goal\n\
int32 x\n\
int32 y\n\
int32 z\n\
int32 roll\n\
int32 pitch\n\
int32 yaw\n\
string frame\n\
\n\
";
  }

  static const char* value(const ::motion_msgs::MoveRobotGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motion_msgs::MoveRobotGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
      stream.next(m.frame);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveRobotGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motion_msgs::MoveRobotGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motion_msgs::MoveRobotGoal_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<int32_t>::stream(s, indent + "  ", v.z);
    s << indent << "roll: ";
    Printer<int32_t>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<int32_t>::stream(s, indent + "  ", v.yaw);
    s << indent << "frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.frame);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTION_MSGS_MESSAGE_MOVEROBOTGOAL_H
